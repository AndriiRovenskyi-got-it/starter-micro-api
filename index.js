const axios = require('axios');

const TelegramBot = require('node-telegram-bot-api');
const token = '6210752347:AAFfxP_uPLtbHa3g9MFjTH1Uji9KgYWIpGs';

const bot = new TelegramBot(token, { polling: true });

// —Ñ—É–Ω–∫—Ü—ñ—ó, —è–∫—ñ –±—É–¥—É—Ç—å –≤–∏–∫–ª–∏–∫–∞—Ç–∏—Å—å –ø—Ä–∏ –Ω–∞—Ç–∏—Å–Ω–µ–Ω–Ω—ñ –Ω–∞ –∫–Ω–æ–ø–∫–∏
function handleButton1(number, chatId) {
    // —Ç—É—Ç –∫–æ–¥, —è–∫–∏–π –±—É–¥–µ –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏—Å—å –ø—Ä–∏ –Ω–∞—Ç–∏—Å–Ω–µ–Ω–Ω—ñ –Ω–∞ –∫–Ω–æ–ø–∫—É 1
    // –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –º–æ–∂–Ω–∞ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    generateStatsForTrader(number, chatId);
}

// –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å, —è–∫–∏–π –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∫–æ–º–∞–Ω–¥–∏ /start
bot.onText(/\/start/, (msg) => {
    // –æ–±'—î–∫—Ç –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∫–Ω–æ–ø–æ–∫
    const options = {
        reply_markup: {
            keyboard: [
                [{ text: '-Â§©‰Ωø‰πãÁøº-' }],  // –∫–Ω–æ–ø–∫–∞ 1
                [{ text: 'mrwin68' }],     // –∫–Ω–æ–ø–∫–∞ 2
                [{ text: 'Renaixensa' }],  // –∫–Ω–æ–ø–∫–∞ 3
                [{ text: 'BAN_K' }],       // –∫–Ω–æ–ø–∫–∞ 4
            ],
            resize_keyboard: true,
            one_time_keyboard: true,
        },
    };

    // –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–∞–º–∏
    bot.sendMessage(msg.chat.id, '–í–∏–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω—É –∫–Ω–æ–ø–∫—É:', options);
});

// –æ–±—Ä–æ–±–Ω–∏–∫–∏ –Ω–∞—Ç–∏—Å–Ω–µ–Ω—å –Ω–∞ –∫–Ω–æ–ø–∫–∏
bot.on('message', (msg) => {
    switch (msg.text) {
        case '-Â§©‰Ωø‰πãÁøº-':
            handleButton1(0, msg.chat.id);
            return;
            break;
        case 'mrwin68':
            handleButton1(1, msg.chat.id);
            return;
            break;
        case 'Renaixensa':
            handleButton1(2, msg.chat.id);
            return;
            break;
        case 'BAN_K':
            handleButton1(3, msg.chat.id);
            return;
            break;
    }
})

const followers = [
    { name: '-Â§©‰Ωø‰πãÁøº-', id: 'B2E1DDECC0572E86C195989D2B536D0C', posssitions: [], init: false},
    { name: 'mrwin68', id: '2154D02AD930F6C6E65C507DD73CB3E7', posssitions: [], init: false },
    { name: 'Renaixensa', id: '3EFA61BC63849632347ED020C78634E1', posssitions: [], init: false },
    { name: 'BAN_K', id: '4C7869A87B2D5825AA759D763DA7D3F7', posssitions: [], init: false },
];

function createReq(id) {
    const options = {
        method: 'POST',
        url: 'https://www.binance.com/bapi/futures/v1/public/future/leaderboard/getOtherPosition',
        data: {
            encryptedUid: id,
            tradeType: "PERPETUAL"
        }
    };
    return axios.request(options);
}

function getOrderDetails(order) {
    const symbol = order.symbol;
    const margin = order.amount * order.entryPrice / order.leverage;
    const pnl = order.pnl;
    const side = order.amount > 0 ? 'Long üü¢' : 'Short üõë';
    const entryPrice = order.entryPrice;
    const leverage = order.leverage;
    return {
        symbol,
        margin,
        pnl,
        side,
        entryPrice,
        leverage,
    }
}

function generateStatsForTrader(number, chatId, show = true) {
    let follower = followers[number]
    createReq(follower.id).then(res => {
        let trader = {
            ...follower
        }
        trader.posssitions = [];
        res.data.data.otherPositionRetList.forEach(el => {
            trader.posssitions.push(getOrderDetails(el));
        })

        if (show) {
            let ms =
                `–¢—Ä–µ–π–¥–µ—Ä: ${trader.name} `
            trader.posssitions.forEach(el => {

                ms +=
                    `\n----------\n
                \n–ú–æ–Ω–µ—Ç–∞: ${el.symbol} 
                \n–ú–∞—Ä–∂–∞: ${el.margin} 
                \nPNL: ${el.pnl} 
                \n–°—Ç–æ—Ä–æ–Ω–∞ –ø–æ–∑–∏—Ü—ñ—ó: ${el.side}
                \n–í—Ö—ñ–¥–Ω–∞ —Ü—ñ–Ω–∞: ${el.entryPrice}
                \n–ü–ª–µ—á–µ: ${el.leverage}`
            })
            bot.sendMessage(chatId, ms);
            return;
        }

        if(!follower.init) {
            follower.init = true;
            follower.posssitions = trader.posssitions;
            return;
        }

        console.log(JSON.stringify(trader));
        console.log(JSON.stringify(follower));
        console.log(JSON.stringify(trader) != JSON.stringify(follower));

        if (JSON.stringify(trader) != JSON.stringify(follower)) {
            checkObjects(follower.posssitions, trader.posssitions, follower.name);
            follower.posssitions = trader.posssitions;
        }
    })
}

function checkObjects(arr1, arr2, traiderName) {

    arr1.forEach((obj1) => {
        const obj2 = arr2.find((o) => o.symbol === obj1.symbol);

        if (!obj2) {
            bot.sendMessage('-1001916629002',`–°–∏–≥–Ω–∞–ª üìä \n
                \n–ó–∞–∫—Ä–∏–≤ –ø–æ–∑–∏—Ü—ñ—é ${obj1.symbol} - ${traiderName} \n\nPNL: ${obj1.pnl} `);
        } else if (!isEquivalent(obj1, obj2)) {
            bot.sendMessage('-1001916629002',`–°–∏–≥–Ω–∞–ª üìä \n
                \n–ó–º—ñ–Ω–∏–ª–∞—Å—å –ø–æ–∑–∏—Ü—ñ—è ${obj1.symbol} - ${traiderName}
                \n–ú–∞—Ä–∂–∞ (–±—É–ª–æ): ${obj1.margin} 
                \nPNL (–±—É–ª–æ): ${obj1.pnl} 
                \n–í—Ö—ñ–¥–Ω–∞ —Ü—ñ–Ω–∞ (–±—É–ª–æ): ${obj1.entryPrice}
                \n–ü–ª–µ—á–µ (–±—É–ª–æ): ${obj1.leverage}
                \n–ú–∞—Ä–∂–∞ (—Å—Ç–∞–ª–æ): ${obj2.margin} 
                \nPNL (—Å—Ç–∞–ª–æ): ${obj2.pnl} 
                \n–í—Ö—ñ–¥–Ω–∞ —Ü—ñ–Ω–∞ (—Å—Ç–∞–ª–æ): ${obj2.entryPrice}
                \n–ü–ª–µ—á–µ (—Å—Ç–∞–ª–æ): ${obj2.leverage}
            `);
        }
    });

    arr2.forEach((obj2) => {
        const obj1 = arr1.find((o) => o.symbol === obj2.symbol);

        if (!obj1) {
            bot.sendMessage('-1001916629002', `–°–∏–≥–Ω–∞–ª üìä \n
                \n–í—ñ–¥–∫—Ä–∏–≤ –ø–æ–∑–∏—Ü—ñ—é ${obj2.symbol} - ${traiderName}
                \n–ú–∞—Ä–∂–∞: ${obj2.margin} 
                \nPNL: ${obj2.pnl} 
                \n–°—Ç–æ—Ä–æ–Ω–∞ –ø–æ–∑–∏—Ü—ñ—ó: ${obj2.side}
                \n–í—Ö—ñ–¥–Ω–∞ —Ü—ñ–Ω–∞: ${obj2.entryPrice}
                \n–ü–ª–µ—á–µ: ${obj2.leverage}` );
        }
    });
}

function isEquivalent(obj1, obj2) {
    const props = ['margin', 'side', 'entryPrice', 'leverage'];

    for (let i = 0; i < props.length; i++) {
        const prop = props[i];

        if (obj1[prop] !== obj2[prop]) {
            return false;
        }
    }

    return true;
}



let i = 0;
setInterval(() => {
    if (i == 4) {
        i = 0;
    }
    generateStatsForTrader(i++, '-1001916629002', false);
}, 4000)


bot.sendMessage('-1001916629002',`–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ`);
